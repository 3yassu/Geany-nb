{
    "nbformat": 4,
    "nbformat_minor": 0,
    "metadata": {
        "colab": {
            "provenance": []
        },
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3"
        },
        "language_info": {
            "name": "python"
        }
    },
    "cells": [
        {
            "cell_type": "markdown",
            "source": [
                "#Eyassu Mongalo\n",
                "3151409\n",
                "Tuesday 4PM, Mahmudul Hasan\n",
                "9/2/2025"
            ],
            "metadata": {
                "id": "Gq3Amb_6njyB"
            }
        },
        {
            "cell_type": "markdown",
            "source": [
                "Insertion sort method 1, New array which takes in a list and sorts it by creating a new array and inputting elements 1 by 1 each item with a helper function \"add\" placed until the given array is empty\n",
                "\n",
                "---\n",
                "\n",
                "The time complexity is O($n^2$)"
            ],
            "metadata": {
                "id": "DEUhPVJJmlsK"
            }
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "id": "a4XjaMuenfjs",
                "colab": {
                    "base_uri": "https://localhost:8080/"
                },
                "outputId": "91476295-b6de-440c-bbc8-97300aa0c22a"
            },
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": [
                        "[1]\n",
                        "[1, 5]\n",
                        "[1, 4, 5]\n",
                        "[1, 2, 4, 5]\n",
                        "[1, 2, 4, 5, 8]\n",
                        "[1, 2, 4, 5, 8]\n"
                    ]
                }
            ],
            "source": [
                "#Insertion Sort Method 1 (New array)\n",
                "\n",
                "def add(array, item):\n",
                "  for i in range(len(array)):\n",
                "    if array[i] > item:\n",
                "      array.insert(i, item)\n",
                "      return\n",
                "  array.append(item)\n",
                "\n",
                "def insertion_sort_method1(array):\n",
                "  sorted_array = []\n",
                "  while len(array) > 0:\n",
                "    add(sorted_array, array.pop(0))\n",
                "    #print(sorted_array) # show the intermediate outputs ????\n",
                "  return sorted_array\n",
                "# Quick test\n",
                "print(insertion_sort_method1([1, 5, 4, 2, 8]))"
            ]
        },
        {
            "cell_type": "code",
            "source": [
                "#Insertion Sort Method 2 (Shifting)\n",
                "def shift(array, index): #Helper method for insertion_sort_2\n",
                "  s_index = 0 #swap index\n",
                "  for i in range(index): #position goes (0,...,|i,...) for sorted and unsorted\n",
                "    if array[i] < array[i]:\n",
                "      s_index += 1\n",
                "  array.insert(s_index, array.pop(index))\n",
                "\n",
                "def insertionSort(array):\n",
                "  for i in range(len(array)): #sorts through each index of the array with the shift function\n",
                "    shift(array, i)\n",
                "  return array\n"
            ],
            "metadata": {
                "id": "rvew07Oq5bYB"
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "markdown",
            "source": [
                "Insertion sort method 2, Takes an array and swaps items within the array by index, starting from the first with the shift helper function\n",
                "\n",
                "---\n",
                "\n",
                "The time complexity is O($n^2$)"
            ],
            "metadata": {
                "id": "p87dA4sdm81O"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "Arr = ([], [7, 7, 7, 7], [5, 4, 3, 2, 1])\n",
                "Expected = ([], [7, 7, 7, 7], [1, 2, 3, 4, 5])\n",
                "for arr, exp in zip(Arr, Expected):\n",
                "  insert_sorted = insertionSort(arr)\n",
                "  print(f\"insertion_sort_method2({arr}) = {insert_sorted}, expected = {exp}: sorted == exp -> {insert_sorted == exp}\")"
            ],
            "metadata": {
                "id": "koNEucmE6UtJ",
                "colab": {
                    "base_uri": "https://localhost:8080/"
                },
                "outputId": "a9fcc351-3d84-45d5-ff68-19eaf32c2995"
            },
            "execution_count": null,
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": [
                        "insertion_sort_method2([]) = [], expected = []: sorted == exp -> True\n",
                        "insertion_sort_method2([7, 7, 7, 7]) = [7, 7, 7, 7], expected = [7, 7, 7, 7]: sorted == exp -> True\n",
                        "insertion_sort_method2([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5], expected = [1, 2, 3, 4, 5]: sorted == exp -> True\n"
                    ]
                }
            ]
        },
        {
            "cell_type": "markdown",
            "source": [
                "This recursive function takes in a list and recursively calls itself with 2 arrays half the length of the original, it them sorts these from the ground up using the merge helper function to merge the 2 sorted lists, sorting them before they go up the next level to be sorted again with a newly sorted list\n",
                "\n",
                "---\n",
                "\n",
                "The time complexity if O($nlog(n)$)"
            ],
            "metadata": {
                "id": "eflr2MPFnm_j"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "#Recursive Merge Sort\n",
                "def merge(l1, l2): #helped function for merge_sort, merges 2 sorted lists\n",
                "  l3 = []\n",
                "  while len(l1) > 0 or len(l2) > 0:\n",
                "    if len(l1) == 0:\n",
                "      l3.extend(l2)\n",
                "      return l3\n",
                "    elif len(l2) == 0:\n",
                "      l3.extend(l1)\n",
                "      return l3\n",
                "    else:\n",
                "      l3.append(l1.pop(0) if l1[0] < l2[0] else l2.pop(0))\n",
                "  return l3\n",
                "\n",
                "\n",
                "def merge_sort(array): #splits the lists and merges with recursion\n",
                "  length = len(array)\n",
                "  if length <= 1:\n",
                "    return array\n",
                "  left = array[0:length//2]\n",
                "  right = array[length//2:]\n",
                "  return merge(merge_sort(left), merge_sort(right))"
            ],
            "metadata": {
                "id": "wmhcY_dJ5dbf"
            },
            "execution_count": null,
            "outputs": []
        },
        {
            "cell_type": "code",
            "source": [
                "Arr = ([], [7, 7, 7, 7], [5, 4, 3, 2, 1])\n",
                "Expected = ([], [7, 7, 7, 7], [1, 2, 3, 4, 5])\n",
                "for arr, exp in zip(Arr, Expected):\n",
                "  merge_sorted = merge_sort(arr)\n",
                "  print(f\"merge_sort({arr}) = {merge_sorted}, expected = {exp}: merged == exp -> {merge_sorted == exp}\")"
            ],
            "metadata": {
                "colab": {
                    "base_uri": "https://localhost:8080/"
                },
                "id": "kgzOgR1ziEJo",
                "outputId": "06be953d-d4cf-4652-9b35-318b03735fba"
            },
            "execution_count": null,
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": [
                        "merge_sort([]) = [], expected = []: merged == exp -> True\n",
                        "merge_sort([7, 7, 7, 7]) = [7, 7, 7, 7], expected = [7, 7, 7, 7]: merged == exp -> True\n",
                        "merge_sort([5, 4, 3, 2, 1]) = [1, 2, 3, 4, 5], expected = [1, 2, 3, 4, 5]: merged == exp -> True\n"
                    ]
                }
            ]
        },
        {
            "cell_type": "markdown",
            "source": [
                "This final block tests the time of the 3 implemetations of sorting algorithms with numpy's sorting algorithm (a mix of tim and quick sort) outclasses merge and insertion sort, and insertion sort's in place method was by far the slowest with the first method being almost twice as fast."
            ],
            "metadata": {
                "id": "Rw4_2nChoOHw"
            }
        },
        {
            "cell_type": "code",
            "source": [
                "import random\n",
                "import time\n",
                "import numpy as np\n",
                "# -----------------------------\n",
                "# Experiment\n",
                "# -----------------------------\n",
                "# 1. Create a large random array\n",
                "N = 5000 # you can change size (e.g., 10_000)\n",
                "arr = [random.randint(0, 10**6) for _ in range(N)]\n",
                "# 2. Time Insertion Sort\n",
                "arr_copy = arr[:]\n",
                "start = time.perf_counter()\n",
                "output = insertionSort(arr_copy)\n",
                "t_insertion = time.perf_counter() - start\n",
                "print(f\"Insertion Sort time: {t_insertion:.6f} sec\")\n",
                "arr_copy = arr[:]\n",
                "start = time.perf_counter()\n",
                "output = insertion_sort_method1(arr_copy)\n",
                "t_insertion = time.perf_counter() - start\n",
                "print(f\"Insertion Sort time: {t_insertion:.6f} sec\")\n",
                "# 3. Time Merge Sort\n",
                "arr_copy = arr[:]\n",
                "start = time.perf_counter()\n",
                "output_m = merge_sort(arr_copy)\n",
                "t_merge = time.perf_counter() - start\n",
                "print(f\"Merge Sort time: {t_merge:.6f} sec\")\n",
                "# 4. Verify correctness against numpy sort (and measure numpy time)\n",
                "arr_copy = arr[:]\n",
                "start = time.perf_counter()\n",
                "np_sorted = np.sort(arr_copy) # numpy’s highly optimized sort (timsort/quick depending on dtype)\n",
                "t_numpy = time.perf_counter() - start\n",
                "print(f\"NumPy Sort time: {t_numpy:.6f} sec\")"
            ],
            "metadata": {
                "id": "u1c8_3iI-Ya3",
                "colab": {
                    "base_uri": "https://localhost:8080/"
                },
                "outputId": "f25828a1-38fb-4e4d-8033-8b24fd6d6cde"
            },
            "execution_count": null,
            "outputs": [
                {
                    "output_type": "stream",
                    "name": "stdout",
                    "text": [
                        "Insertion Sort time: 0.570591 sec\n",
                        "Insertion Sort time: 0.224335 sec\n",
                        "Merge Sort time: 0.016753 sec\n",
                        "NumPy Sort time: 0.003839 sec\n"
                    ]
                }
            ]
        }
    ]
}